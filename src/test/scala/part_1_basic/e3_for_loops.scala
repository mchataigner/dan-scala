package part_1_basic

import support.HandsOnSuite

/**
*  For loops and for comprehensions
*/

class e3_for_loops extends HandsOnSuite {

  // for loop

  exercice("let's write a for loop") {
    //0, 1, 2, 3, 4, 5, 6, 7, 8, 9
    val someNumbers = Range(0, 10)
    // you can also use 'until' and 'to' => 0 until 10 == Range(0,10) == 0 to 9

    var sum = 0
    for (i <- someNumbers) {
      sum += i
    }

    sum should equal(__)
  }

  exercice("adding some logic") {
    val someNumbers = 0 until 10
    var sum = 0
    // sum only even numbers !
    for (i <- someNumbers) {
      if (i % 2 == 0) {
        sum += i
      }
    }

    sum should equal(__)
  }

  // for comprehensions

  /**
  * Scala offers a lightweight notation for expressing sequence comprehensions.
  * Comprehensions have the form for (enumerators) yield e, where enumerators refers to a
  * semicolon-separated list of enumerators.
  *
  * An enumerator is either a generator which introduces new variables, or it is a filter.
  * A comprehension evaluates the body e for each binding generated by the enumerators
  * and returns a sequence of these values using the `yield` keyword.
  */
  exercice("Using for comprehension") {


    val someNumbers = 0 until 10

    val aList =
      for {
        i <- someNumbers
        if (i % 2) == 0
      }
      yield i

    // reduceLeft allow us to sum all list elements
    aList.reduceLeft( (k,l) => k + l) should be(__)
  }


  /**
  * A for comprehension can use several enumerators
  */
  exercice("Generating more complex list") {
    val xValues = 1 until 5
    val yValues = 1 until 3
    val coordinates = for {
      x <- xValues
      y <- yValues
    }
    yield (x, y)
    coordinates(4) should be(__)
  }

  /**
  * This is the Java equivalent of this code:

  * class Tuple() {
  * private final int x;
  * private final int y;
  *
  *   public void Tuple(int x, int y) {
  *     this.x = x;
  *     this.y = y;
  *   }
  *
  * ... [methods skipped] ...
  *
  * }
  *
  * List<Tuple> coordinates = new ArrayList<Tuple>();
  *
  * for (int x = 1; i < 5; x++) {
  *   for (int y = 1; i < 3; y++) {
  *      coordinates.add(new Tuple(x, y));
  *   }
  * }
  * ... [yada yada yada] ...
  *
  */
}
